#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
#
# Imports =====================================================================
from browser import window
from browser import document

from components import DropdownHandler

from components import InputController
from components import ConspectHandler


# Functions & classes =========================================================
class StandardElDescriptor(object):
    def __init__(self, el):
        self.el = el

    def __get__(self, obj, objtype):
        return InputController.get_el(self.el)

    def __set__(self, obj, value):
        InputController.set_el(self.el, value)

    def validate(self):
        if not self.el.required:
            return True

        if InputController.get_el(self.el):
            self.el.style.border = "0"
            return True

        self.el.style.border = "2px solid red"
        return False


class ConspectDescriptor(object):
    def __get__(self, obj, objtype):
        return obj.conspect_handler.get_dict()

    def __set__(self, obj, value):
        obj.conspect_handler.set(value)

    def validate(self):
        if ConspectHandler.get_dict():
            ConspectHandler.show_error(False)
            return True

        ConspectHandler.show_error(True)
        return False


class AnnotationDescriptor(StandardElDescriptor):
    def __get__(self, obj, objtype):
        value = InputController.get_el(self.el)

        active_lines = [
            line.strip()
            for line in value.splitlines()
            if not line.strip().startswith("--")
        ]

        return "\n".join(active_lines)


class PeriodicityDescriptor(StandardElDescriptor):
    def __set__(self, obj, value):
        # custom handlers because of custom make_periode_typeahead_tag func
        parent_id = self.el.parent.id
        if "typeahead" not in parent_id.lower():
            parent_id = self.el.parent.parent.id

        if type(value) in [list, tuple] and len(value) > 1:
            window.make_periode_typeahead_tag("#" + parent_id, value)
            DropdownHandler.set_dropdown_glyph(
                self.el.id,
                "glyphicon-menu-down"
            )
            return

        window.destroy_typeahead_tag("#" + parent_id)
        InputController.set_el(self.el, value)


class RadioDescriptor(object):
    def __init__(self, name, val_type=bool):
        self.name = name
        self.type = val_type

        self.elements = [
            el
            for el in document.get(selector="input[name='%s']" % name)
        ]
        self.values = {self._get_right_type(el.value) for el in self.elements}

    def _get_right_type(self, val):
        if self.type == bool:
            return val.lower() == "true"

        return self.type(val)

    def __get__(self, obj, objtype):
        for el in self.elements:
            if el.checked:
                return self._get_right_type(el.value)

        return None

    def __set__(self, obj, value):
        def _normalize(val):
            return str(val).lower()

        for el in self.elements:
            if _normalize(el.value) == _normalize(value):
                el.checked = True
                return

        raise ValueError(
            "Can't set the `%s` to `%s`." % (str(el), repr(value))
        )
