#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
#
# Imports =====================================================================
from browser import alert  # TODO: Remove

from browser import window
from browser import document

from components import LogView
from components import ProgressBar
from components import UrlBoxError
from components import ISSNBoxError
from components import ConspectHandler
from components import DropdownHandler

from components import UserKeywordHandler
from components import AlephKeywordHandler
from components import AanalysisKeywordHandler

from components import InputController


# Functions & classes =========================================================
class StandardElDescriptor(object):
    def __init__(self, el):
        self.el = el

    def __get__(self, obj, objtype):
        return obj.input_controller.get_el(self.el)

    def __set__(self, obj, value):
        obj.input_controller.set_el(self.el, value)

    def validate(self):
        if not self.el.required:
            return True

        if InputController.get_el(self.el):
            self.el.style.border = "0"
            return True

        self.el.style.border = "2px solid red"
        return False


class ConspectDescriptor(object):
    def __get__(self, obj, objtype):
        return obj.conspect_handler.get_dict()

    def __set__(self, obj, value):
        obj.conspect_handler.set(value)

    def validate(self):
        if ViewController.conspect_handler.get_dict():
            ViewController.conspect_handler.show_error(False)
            return True

        ViewController.conspect_handler.show_error(True)
        return False


class AnnotationDescriptor(StandardElDescriptor):
    def __get__(self, obj, objtype):
        value = obj.input_controller.get_el(self.el)

        active_lines = [
            line.strip()
            for line in value.splitlines()
            if not line.strip().startswith("--")
        ]

        return "\n".join(active_lines)


class PeriodicityDescriptor(StandardElDescriptor):
    def __set__(self, obj, value):
        # custom handlers because of custom make_periode_typeahead_tag func
        parent_id = self.el.parent.id
        if "typeahead" not in parent_id.lower():
            parent_id = self.el.parent.parent.id

        if type(value) in [list, tuple] and len(value) > 1:
            window.make_periode_typeahead_tag("#" + parent_id, value)
            DropdownHandler.set_dropdown_glyph(
                self.el.id,
                "glyphicon-menu-down"
            )
            return

        window.destroy_typeahead_tag("#" + parent_id)
        obj.input_controller.set_el(self.el, value)


class View(object):
    url = StandardElDescriptor(document["url"])
    issn = StandardElDescriptor(document["issn"])
    title = StandardElDescriptor(document["title"])
    creation_date = StandardElDescriptor(document["creation_date"])
    author = StandardElDescriptor(document["author"])
    place = StandardElDescriptor(document["place"])
    language = StandardElDescriptor(document["lang"])
    frequency = StandardElDescriptor(document["freq"])
    conspect = ConspectDescriptor()
    annotation = AnnotationDescriptor(document["annotation"])
    periodicity = PeriodicityDescriptor(document["periode"])

    def __init__(self):
        # all kind of progress bars and error boxes
        self.log_view = LogView
        self.progress_bar = ProgressBar
        self.urlbox_error = UrlBoxError
        self.issnbox_error = ISSNBoxError
        self.conspect_handler = ConspectHandler
        self.user_kw_handler = UserKeywordHandler
        self.aleph_kw_handler = AlephKeywordHandler
        self.analysis_kw_handler = AanalysisKeywordHandler
        self.input_controller = InputController

        self._property_list = [
            "url",
            "issn",
            "title",
            "creation_date",
            "author",
            "place",
            "language",
            "frequency",
            "conspect",
            "annotation",
            "periodicity",
            "keywords",
        ]

    def reset(self):
        self.progress_bar.reset()
        self.progress_bar.show([0, 0])
        self.urlbox_error.reset()
        self.issnbox_error.reset()

        self.input_controller._reset_typeaheads()

    @property
    def keywords(self):
        dataset = [
            self.aleph_kw_handler.keywords,
            self.user_kw_handler.keywords,
            self.analysis_kw_handler.keywords,
        ]

        return sum(dataset, [])  # flattened dataset

    def get_all_properties(self):
        properties = {
            prop_name: getattr(self, prop_name)
            for prop_name in self._property_list
        }

        return properties

    def validate(self):
        properties = (
            getattr(self.__class__, prop)
            for prop in self._property_list
            if hasattr(self.__class__, prop)
        )

        all_valid = True
        for prop in properties:
            if hasattr(prop, "validate"):
                # oh for fucks sake, brython has broken parser and return in
                # prop.validate() will also return from this function
                result = prop.validate()
                all_valid = all_valid and result

        return all_valid


ViewController = View()
