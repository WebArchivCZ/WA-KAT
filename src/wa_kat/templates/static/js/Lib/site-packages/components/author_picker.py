#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
#
# Imports =====================================================================
import json

from browser import document

from browser import alert  # TODO: Remove

from .shared import make_request
from .shared import func_on_enter


# Variables ===================================================================
# Functions & classes =========================================================
class AuthorPicker(object):
    div_el = document["author_picker"]  # whole <div>
    input_el = document["author_input"]  # <input> for author's name
    search_btn_el = document["search_author"]  # trigger the search of author
    select_el = document["author_select"]  # <select> element with authors
    storno_btn_el = document["storno_author"]  # used to storno the picking
    pick_btn_el = document["pick_author"]  # used to accept the selected author
    black_overlay_el = document["black_overlay"]

    picked_author = None

    @classmethod
    def show(cls):
        cls.div_el.style.display = "block"
        cls.black_overlay_el.style.display = "block"
        cls.black_overlay_el.bind("click", lambda x: cls.hide())

    @classmethod
    def hide(cls):
        cls.div_el.style.display = "none"
        cls.black_overlay_el.style.display = "none"

    @classmethod
    def on_pick_button_pressed(cls, ev):
        alert(cls.select_el.value)

    @classmethod
    def set_select(cls, value):
        alert(value)

    @classmethod
    def bind(cls):
        document["show_author_picker"].bind("click", lambda x: cls.show())

        cls.storno_btn_el.bind("click", lambda x: cls.hide())
        cls.pick_btn_el.bind("click", cls.on_pick_button_pressed)


class AuthorPickerAdapter(AuthorPicker):
    """
    Adapter of the :class:`AuthorPicker` to aleph REST API.
    """
    @classmethod
    def on_complete(cls, req):
        # handle http errors
        if not (req.status == 200 or req.status == 0):
            alert(req.text)  # better handling
            return

        resp = json.loads(req.text)

        if not resp:
            alert("Chyba při konverzi!")  # TODO: better
            return

        cls.set_select(resp)

    @classmethod
    def start(cls, ev):
        # somehow the first call doesn't stop the propagation
        ev.stopPropagation()
        ev.stopPropagation()

        # make sure, that `author` was filled
        author = cls.input_el.value.strip()
        if not author:
            alert("Prosím vyplňte název autora.")
            return

        make_request(
            url="/api_v1/aleph/authors_by_name",
            data={"name": author},
            on_complete=cls.on_complete
        )

    @classmethod
    def bind(cls):
        super(cls, cls).bind()

        cls.search_btn_el.bind("click", cls.start)
        cls.search_btn_el.bind("keypress", func_on_enter(cls.start))


AuthorPickerAdapter.bind()
